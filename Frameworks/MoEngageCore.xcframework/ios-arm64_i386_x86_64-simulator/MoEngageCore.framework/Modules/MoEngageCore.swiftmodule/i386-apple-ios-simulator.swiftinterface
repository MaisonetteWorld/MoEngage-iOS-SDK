// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoEngageCore
import CommonCrypto
import Foundation
import ImageIO
@_exported import MoEngageCore
import SafariServices
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
@objc public class MONetworkRequest : ObjectiveC.NSObject {
  @objc public init(_ sdkConfig: MoEngageCore.MOSDKConfig, configController: MoEngageCore.MOConfigController, serviceType: MoEngageCore.NetworkService, params: Swift.Dictionary<Swift.String, Any>? = nil, additionalHeaders: Swift.Dictionary<Swift.String, Any>? = nil, requestBody: Swift.Dictionary<Swift.String, Any>?, additionalPathComponent: Swift.String? = nil)
  @objc public init(withSDKConfig sdkConfig: MoEngageCore.MOSDKConfig)
  @objc public func execute(completionHandler: @escaping MoEngageCore.completionHandler)
  @objc public func execute(withCompletionBlockWithResponseCode completionBlock: @escaping MoEngageCore.completionHandlerWithResponseCode)
  public func downloadResources(_ resourceURL: Foundation.URL, completionHandler: @escaping MoEngageCore.richNotificationCompletionHandler)
  @objc deinit
}
public struct MOCoreConstants {
  public struct UserDefault {
    public struct Keys {
      public static let sdkVersion: Swift.String
      public static let sdkUniqueID: Swift.String
      public static let trackReInstall: Swift.String
    }
  }
  public struct DateTimeFormats {
    public static let iso8601: Swift.String
    public static let iso8601WithoutZ: Swift.String
    public static let iso8601MilliSec: Swift.String
    public static let short: Swift.String
    public static let timeWithoutZ: Swift.String
    public static let timeWithMilliSec: Swift.String
  }
  public struct Notifications {
    public struct Names {
      public static let userReset: Swift.String
      public static let updateModules: Swift.String
      public static let showInApp: Swift.String
    }
    public struct UserInfoKeys {
      public static let instanceID: Swift.String
    }
  }
  public struct DeviceType {
    public static let tablet: Swift.String
    public static let mobile: Swift.String
    public static let tv: Swift.String
  }
  public struct RequestPayloadKeys {
  }
}
public class MoEnagageGifManager {
  public static var defaultManager: MoEngageCore.MoEnagageGifManager
  open var haveCache: Swift.Bool
  open var remoteCache: [Foundation.URL : Foundation.Data]
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: UIKit.UIImageView)
  open func updateCacheSize(for imageView: UIKit.UIImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func hasCache(_ imageView: UIKit.UIImageView) -> Swift.Bool
}
@objc public enum MODataCenter : Swift.Int {
  case data_center_default
  case data_center_01
  case data_center_02
  case data_center_03
  public static func getDataCenter(dataCenter: Swift.String) -> MoEngageCore.MODataCenter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MOPluginType : Swift.Int {
  case native
  case segment
  case cordova
  case reactNative
  case flutter
  case unity
  case xamarin
  case capacitor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MOSDKConfig : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var moeAppID: Swift.String {
    get
  }
  @objc public var moeDataCenter: MoEngageCore.MODataCenter
  @objc public var appGroupID: Swift.String
  @objc public var integrationInfoArray: [MoEngageCore.MOIntegrationInfo]
  @objc public var analyticsPeriodicFlushDuration: Swift.Int
  @objc public var analyticsDisablePeriodicFlush: Swift.Bool
  @objc public var encryptNetworkRequests: Swift.Bool
  @objc public var optOutDataTracking: Swift.Bool
  @objc public var optOutIDFATracking: Swift.Bool
  @objc public var optOutIDFVTracking: Swift.Bool
  @objc public var identifier: Swift.String {
    get
  }
  @objc public var isDefaultInstance: Swift.Bool {
    get
  }
  @objc public var isTestEnvironment: Swift.Bool {
    get
  }
  @objc public var enableLogs: Swift.Bool
  @objc public init(withAppID appID: Swift.String)
  @objc public func updateConfigForTestEnvironment()
  @objc public func encode(with encoder: Foundation.NSCoder)
  @objc required public init(coder decoder: Foundation.NSCoder)
  public func getIntegrationInfoDictArray() -> [[Swift.String : Swift.String]]?
  @objc public func appendIntegrationTypeInfo(_ integrationInfo: MoEngageCore.MOIntegrationInfo)
  @objc deinit
}
public enum MoEngageExceptions : Swift.Error {
  case mandatoryParamsMissing
  case mainThreadCheckFailed
  public static func == (a: MoEngageCore.MoEngageExceptions, b: MoEngageCore.MoEngageExceptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MOCoreUtils : ObjectiveC.NSObject {
  @objc public static func getMaxParallelInstancesSupported() -> Swift.Int
  @objc public static func getSDKInstance(forInstanceID instanceID: Swift.String?) -> MoEngageCore.MOSDKConfig?
  @objc public static func getSDKLibraryDirectoryPath() -> Swift.String?
  @objc public static func getInstanceRootDirectoryPath(forIdentifier identifier: Swift.String) -> Swift.String?
  @objc public static func getDocumentsDirectoryPath() -> Swift.String?
  @objc public static func removeFile(atPath path: Swift.String) -> Swift.Bool
  @objc public static func getTopMostViewController() -> UIKit.UIViewController?
  @objc public static func showAlertView(withMessage msg: Swift.String, andTitle title: Swift.String)
  @objc public static func openDeeplink(withUrlString urlStr: Swift.String?)
  @objc public static func openExternalBrowser(withUrlString urlStr: Swift.String?)
  @objc public static func getUrlFromString(_ urlStr: Swift.String?) -> Foundation.URL?
  @objc public static func openDeeplink(withUrl url: Foundation.URL?)
  @objc public static func openRichLanding(withUrlString urlStr: Swift.String?)
  @objc public static func openRichLanding(withUrl url: Foundation.URL?)
  @objc public static func getMoEngageSDKVersion() -> Swift.String
  @objc public static func getAppVersion() -> Swift.String
  @objc public static func getAppBundleId() -> Swift.String
  @objc public static func getIDFV() -> Swift.String?
  @objc public static func getDeviceModel() -> Swift.String
  @objc public static func getDeviceOSVersion() -> Swift.String
  @objc public static func getDeviceModelName() -> Swift.String
  @objc public static func getDeviceModelType() -> Swift.String
  @objc public static func getCommonSDKUserDefault() -> Foundation.UserDefaults?
  @objc public static func getSDKUserDefaultInstance(withConfig sdkConfig: MoEngageCore.MOSDKConfig?) -> Foundation.UserDefaults?
  @objc public static func savePushToken(_ token: Swift.String)
  @objc public static func getPushToken() -> Swift.String?
  @objc public static func getSDKUniqueIdForInstance(withConfig sdkConfig: MoEngageCore.MOSDKConfig) -> Swift.String
  @objc public static func generateSDKUniqueID() -> Swift.String
  @objc public static func isSdkEnabledForInstance(withConfig sdkConfig: MoEngageCore.MOSDKConfig) -> Swift.Bool
  @objc public static func updateUserDefault(withSDKState isSDKEnabled: Swift.Bool, forSDKConfig sdkConfig: MoEngageCore.MOSDKConfig)
  @objc public static func enableSDKForInstance(withConfig sdkConfig: MoEngageCore.MOSDKConfig)
  @objc public static func disableSDKForInstance(withConfig sdkConfig: MoEngageCore.MOSDKConfig)
  @objc public static func MD5Hash(_ string: Swift.String) -> Swift.String?
  @objc public static func sharedUIApplication() -> UIKit.UIApplication?
  @objc public static func getAppIDForNetworkAPICalls(sdkConfig: MoEngageCore.MOSDKConfig) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  convenience public init?(hex: Swift.String, alpha: Swift.Float)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@_hasMissingDesignatedInitializers public class ValidateExtension {
  public static func isFromExtension() -> Swift.Bool
  @objc deinit
}
@objc public enum MOLoggerType : Swift.Int {
  case verbose = 0
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MOIntegrationInfo : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var integrationType: MoEngageCore.MOPluginType
  @objc public var integrationVersion: Swift.String
  @objc public init(withPluginType pluginType: MoEngageCore.MOPluginType, andVersion version: Swift.String)
  @objc public func encode(with encoder: Foundation.NSCoder)
  @objc required public init(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MODateUtils : ObjectiveC.NSObject {
  @objc public static func dateFormatter(forFormat format: Swift.String?, andforGMT isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForUsPosixLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForDeviceLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func isDate1(_ date1: Foundation.Date, sameAsDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, laterToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, earlierToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDateLaterToCurrentTime(_ date: Foundation.Date) -> Swift.Bool
  @objc public static func checkDateInRange(_ dateToEvaluate: Foundation.Date?, fromStartDate startDate: Foundation.Date?, toEndDate endDate: Foundation.Date?) -> Swift.Bool
  @objc public static func checkTimeInRange(_ timeToEvaluate: Foundation.DateComponents, fromStartTime startTime: Foundation.DateComponents, toEndTime endTime: Foundation.DateComponents) -> Swift.Bool
  @objc public static func getGMTtimeEpoch(forDate date: Foundation.Date? = nil) -> Swift.String
  @objc public static func getLocalTimeForEventsPayload(forDate date: Foundation.Date? = nil) -> Swift.String?
  @objc public static func dateByAddingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func dateBySubtractingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func getDateComponentsFromTimeString(_ timeString: Swift.String?) -> Foundation.DateComponents?
  @objc public static func getString(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getStringInDeviceLocale(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getDate(forString str: Swift.String?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.Date?
  @objc override dynamic public init()
  @objc deinit
}
public typealias GifLevelOfIntegrity = Swift.Float
extension Swift.Float {
  public static let highestNoFrameSkipping: MoEngageCore.GifLevelOfIntegrity
  public static let `default`: MoEngageCore.GifLevelOfIntegrity
  public static let lowForManyGifs: MoEngageCore.GifLevelOfIntegrity
  public static let lowForTooManyGifs: MoEngageCore.GifLevelOfIntegrity
  public static let superLowForSlideShow: MoEngageCore.GifLevelOfIntegrity
}
extension UIKit.UIImage {
  convenience public init(gifData: Foundation.Data, levelOfIntegrity: MoEngageCore.GifLevelOfIntegrity = .default) throws
  convenience public init(gifName: Swift.String, levelOfIntegrity: MoEngageCore.GifLevelOfIntegrity = .default) throws
  public func setGifFromData(_ data: Foundation.Data, levelOfIntegrity: MoEngageCore.GifLevelOfIntegrity) throws
  public func setGif(_ name: Swift.String) throws
  public func framesCount() -> Swift.Int
  public func setGif(_ name: Swift.String, levelOfIntegrity: MoEngageCore.GifLevelOfIntegrity) throws
  public func clear()
}
@_inheritsConvenienceInitializers @objc public class MONetworkConfiguration : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MOAccountMeta : ObjectiveC.NSObject {
  @objc final public let appID: Swift.String
  @objc public init(withInstanceID instanceID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MONetworkUtils : ObjectiveC.NSObject {
  @objc public static func getQueryParamsDictionary(forService service: MoEngageCore.NetworkService, withSDKConfig sdkConfig: MoEngageCore.MOSDKConfig, withConfigController configController: MoEngageCore.MOConfigController) -> Swift.Dictionary<Swift.String, Any>
  @objc public static func getDeviceUniqueID() -> Swift.String?
  @objc public static func isDeviceUniqueIDPresentInKeyChain() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum MONetworkReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class MONetworkReachability {
  public typealias NetworkReachable = (MoEngageCore.MONetworkReachability) -> ()
  public typealias NetworkUnreachable = (MoEngageCore.MONetworkReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MoEngageCore.MONetworkReachability.NetworkStatus, b: MoEngageCore.MONetworkReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: MoEngageCore.MONetworkReachability.Connection
    public static func == (a: MoEngageCore.MONetworkReachability.Connection, b: MoEngageCore.MONetworkReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MoEngageCore.MONetworkReachability.NetworkReachable?
  public var whenUnreachable: MoEngageCore.MONetworkReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: MoEngageCore.MONetworkReachability.Connection {
    get
  }
  public var connection: MoEngageCore.MONetworkReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension MoEngageCore.MONetworkReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MONetworkClient : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension MoEngageCore.MONetworkClient : MoEngageCore.NetworkRequestProtocol {
  @objc dynamic public func executeRequest(_ request: Foundation.URLRequest, forSdkConfig sdkConfig: MoEngageCore.MOSDKConfig, withConfigController configController: MoEngageCore.MOConfigController, completionHandler: @escaping (MoEngageCore.completionHandlerWithResponseCode))
  @objc dynamic public func downloadImageURL(_ imageURL: Foundation.URL, forSdkConfig sdkConfig: MoEngageCore.MOSDKConfig, dataCompletionHandler: @escaping (MoEngageCore.dataCompletionHandler))
  public func downloadResource(_ resourceURL: Foundation.URL, completionHandler: @escaping MoEngageCore.richNotificationCompletionHandler)
}
@_hasMissingDesignatedInitializers public class MOLoggerCoordinator {
  public static var sharedInstance: MoEngageCore.MOLoggerCoordinator
  public var defaultConsoleLogger: MoEngageCore.MOLoggerController
  public func getLoggerInstance(forSDKConfig sdkConfig: MoEngageCore.MOSDKConfig) -> MoEngageCore.MOLoggerController
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOConfigController : ObjectiveC.NSObject {
  @objc public var sdkConfig: MoEngageCore.MOSDKConfig {
    get
  }
  public func persistSDKConfig()
  @objc public func isAccountActive() -> Swift.Bool
  @objc public func isInAppServiceActive() -> Swift.Bool
  @objc public func isInAppStatsServiceActive() -> Swift.Bool
  @objc public func isGeofenceServiceActive() -> Swift.Bool
  @objc public func isInboxServiceActive() -> Swift.Bool
  @objc public func isRealTimeTriggerServiceActive() -> Swift.Bool
  @objc public func isCardsServiceActive() -> Swift.Bool
  @objc public func isRemoteLoggingServiceActive() -> Swift.Bool
  @objc public func isPeriodicSyncEnabled() -> Swift.Bool
  @objc public func minimumPeriodicFlushDurationLimit() -> Swift.Int
  @objc public func periodicFlushDuration() -> Swift.Int
  @objc public func getEventBatchCount() -> Swift.Int
  @objc public func getSourceExtraKeys() -> [Swift.String]
  @objc public func getBlackListedEvents() -> [Swift.String]
  @objc public func isEventBlackListed(_ eventName: Swift.String) -> Swift.Bool
  @objc public func getBlackListedUserAttribute() -> [Swift.String]
  @objc public func isUserAttributeBlackListed(_ userAttrName: Swift.String) -> Swift.Bool
  @objc public func getInstantFlushEvents() -> [Swift.String]
  @objc public func isEventInstantFlushEvent(_ eventName: Swift.String) -> Swift.Bool
  @objc public func getWhitelistedEvents() -> [Swift.String]
  @objc public func isEventWhitelistedEvent(_ eventName: Swift.String) -> Swift.Bool
  @objc public func getRealTimeTriggerSyncInterval() -> Swift.Int
  @objc public func getUserAttributeCachingDuration() -> Swift.Int
  @objc public func getSessionInActiveDuration() -> Swift.Int
  @objc public func isDataTrackingEnabled() -> Swift.Bool
  @objc public func isPushNotificationEnabled() -> Swift.Bool
  @objc public func isInAppEnabled() -> Swift.Bool
  @objc public func setDataTrackingOptOutStatus(_ optOutStatus: Swift.Bool)
  @objc public func isIDFATrackingEnabled() -> Swift.Bool
  @objc public func isIDFVTrackingEnabled() -> Swift.Bool
  @objc public func setNetworkEncryptionStatus(_ status: Swift.Bool)
  @objc public func isNetworkEncryptionEnabled() -> Swift.Bool
  @objc public func getDefaultEncryptionKey() -> Swift.String
  @objc public func getAppEncryptionKey() -> Swift.String?
  @objc public func getAppGroupID() -> Swift.String
  @objc public func getDataCenter() -> MoEngageCore.MODataCenter
  @objc public func setDataCenter(_ dataCenter: MoEngageCore.MODataCenter)
  @objc public func setAppGroupID(_ appGroupID: Swift.String)
  @objc public func getRemoteMinLogLevel() -> MoEngageCore.MOLoggerType
  @objc public func getRestrictedUniqueIDRegex() -> [Swift.String]
  @objc public func isUniqueIDRestricted(_ uniqueID: Swift.String?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MOConfigCoordinator : ObjectiveC.NSObject {
  @objc public static var sharedInstance: MoEngageCore.MOConfigCoordinator
  @objc public func getConfigController(forSDKConfig sdkConfig: MoEngageCore.MOSDKConfig, withCompletionHandler completionHandler: @escaping ((MoEngageCore.MOConfigController?) -> Swift.Void))
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MOLogger : ObjectiveC.NSObject {
  @objc public static func verbose(_ msg: Swift.String?, label: Swift.String? = nil, sdkConfig: MoEngageCore.MOSDKConfig? = nil)
  @objc public static func debug(_ msg: Swift.String?, label: Swift.String? = nil, sdkConfig: MoEngageCore.MOSDKConfig? = nil)
  @objc public static func info(_ msg: Swift.String?, label: Swift.String? = nil, sdkConfig: MoEngageCore.MOSDKConfig? = nil, fileName: Swift.String = #fileID, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, columnNumber: Swift.Int = #column)
  @objc public static func warning(_ msg: Swift.String?, label: Swift.String? = nil, sdkConfig: MoEngageCore.MOSDKConfig? = nil, fileName: Swift.String = #fileID, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, columnNumber: Swift.Int = #column)
  @objc public static func error(_ msg: Swift.String?, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, sdkConfig: MoEngageCore.MOSDKConfig? = nil, fileName: Swift.String = #fileID, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, columnNumber: Swift.Int = #column)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MOCore : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MOCore
  @objc public func initializeInstanceWithSDKConfig(_ sdkConfig: MoEngageCore.MOSDKConfig, isDefaultInstance: Swift.Bool, withCompletionBlock completion: @escaping (() -> ()))
  @objc public func updateDefaultInstanceSDKConfig(_ sdkConfig: MoEngageCore.MOSDKConfig, withCompletionBlock completion: @escaping (() -> ()))
  @objc public func getDefaultSDKConfiguration() -> MoEngageCore.MOSDKConfig?
  @objc public func getSDKConfig(forAppID appID: Swift.String) -> MoEngageCore.MOSDKConfig?
  @objc public func enableSDK()
  @objc public func disableSDK()
  @objc public func isSDKEnabled() -> Swift.Bool
  @objc public func enableSDKForInstance(forAppID appID: Swift.String)
  @objc public func disableSDKForInstance(forAppID appID: Swift.String)
  @objc public func isSDKEnabledForInstance(forAppID appID: Swift.String) -> Swift.Bool
  @objc public func isDeviceUniqueIDPresentInKeyChain() -> Swift.Bool
  @objc public func dismissRichLandingWebViewControllerWithAnimation(_ animate: Swift.Bool)
  @objc public func enableLogs(_ enable: Swift.Bool)
  @objc public func enableLogs(_ enable: Swift.Bool, forAppID appID: Swift.String?)
  @objc public func clearLogs()
  @objc public func clearLogs(forAppID appID: Swift.String?)
  @objc public func enableDefaultConsoleLogger(_ enable: Swift.Bool)
  @objc deinit
}
@objc public protocol SwiftyGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: Swift.Error?)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage, manager: MoEngageCore.MoEnagageGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setGifImage(_ gifImage: UIKit.UIImage, manager: MoEngageCore.MoEnagageGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func startAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func stopAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func isAnimatingGif() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showFrameForIndexDelta(_ delta: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func showFrameAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func updateCache()
  @_Concurrency.MainActor(unsafe) public func updateCurrentImage()
  @_Concurrency.MainActor(unsafe) public func currentFrameIndex() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func frameAtIndex(index: Swift.Int) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public func isDiscarded(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayedInScreen(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func clear()
}
@objc public enum NetworkService : Swift.Int {
  case GetConfig = 0
  case Initialize
  case SendReports
  case InAppMetaFetch
  case InAppGetPayload
  case InAppGetTestPayload
  case InAppSendStats
  case InboxFetch
  case SendCategories
  case RealTimeTriggersFetch
  case CheckUserInSegment
  case GeofenceHit
  case GeofencesFetch
  case CardsFetch
  case CardsDelete
  case CardsUserActivity
  case CrashLake
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias completionHandler = ((Swift.Bool, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias completionHandlerWithResponseCode = ((Swift.Bool, Swift.Int, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias dataCompletionHandler = ((Swift.Bool, Foundation.Data?) -> Swift.Void)
public typealias richNotificationCompletionHandler = ((Foundation.URL?) -> Swift.Void)
@objc public protocol NetworkRequestProtocol {
  @objc func executeRequest(_ request: Foundation.URLRequest, forSdkConfig sdkConfig: MoEngageCore.MOSDKConfig, withConfigController configController: MoEngageCore.MOConfigController, completionHandler: @escaping (MoEngageCore.completionHandlerWithResponseCode))
  @objc func downloadImageURL(_ imageURL: Foundation.URL, forSdkConfig sdkConfig: MoEngageCore.MOSDKConfig, dataCompletionHandler: @escaping (MoEngageCore.dataCompletionHandler))
}
@_hasMissingDesignatedInitializers public class MOLoggerController {
  @objc public func setMinLogDuration(duration: Swift.Int)
  @objc public func setMaxLogDuration(duration: Swift.Int)
  @objc public func setLogDuration(duration: Swift.Int)
  @objc public func clearSavedLogs() -> Swift.Bool
  public func enableLogs(enable: Swift.Bool)
  public func setTag(tag: Swift.String)
  public func saveLogsInDocumentDirectory(enable: Swift.Bool)
  @objc deinit
}
extension MoEngageCore.MODataCenter : Swift.Equatable {}
extension MoEngageCore.MODataCenter : Swift.Hashable {}
extension MoEngageCore.MODataCenter : Swift.RawRepresentable {}
extension MoEngageCore.MOPluginType : Swift.Equatable {}
extension MoEngageCore.MOPluginType : Swift.Hashable {}
extension MoEngageCore.MOPluginType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageExceptions : Swift.Equatable {}
extension MoEngageCore.MoEngageExceptions : Swift.Hashable {}
extension MoEngageCore.MOLoggerType : Swift.Equatable {}
extension MoEngageCore.MOLoggerType : Swift.Hashable {}
extension MoEngageCore.MOLoggerType : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension MoEngageCore.MONetworkReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension MoEngageCore.MONetworkReachability.NetworkStatus : Swift.Hashable {}
extension MoEngageCore.MONetworkReachability.Connection : Swift.Equatable {}
extension MoEngageCore.MONetworkReachability.Connection : Swift.Hashable {}
extension MoEngageCore.NetworkService : Swift.Equatable {}
extension MoEngageCore.NetworkService : Swift.Hashable {}
extension MoEngageCore.NetworkService : Swift.RawRepresentable {}
