#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SafariServices;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL("_TtP12MoEngageCore28ApplicationLifeCycleProtocol_")
@protocol ApplicationLifeCycleProtocol
- (void)applicationEnteredBackground;
- (void)applicationEnteredforeground;
@end

@class NSString;

SWIFT_CLASS("_TtC12MoEngageCore13MOAccountMeta")
@interface MOAccountMeta : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@end

@class MOSDKConfig;
@class NSNumber;
enum MODataCenter : NSInteger;
enum MOLoggerType : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore18MOConfigController")
@interface MOConfigController : NSObject
@property (nonatomic, strong) MOSDKConfig * _Nonnull sdkConfig;
- (BOOL)isAccountActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppStatsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGeofenceServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInboxServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRealTimeTriggerServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCardsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRemoteLoggingServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPeriodicSyncEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)minimumPeriodicFlushDurationLimit SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)periodicFlushDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getEventBatchCount SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getSourceExtraKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventBlackListed:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedUserAttribute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUserAttributeBlackListed:(NSString * _Nonnull)userAttrName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getInstantFlushEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventInstantFlushEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getWhitelistedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventWhitelistedEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getRealTimeTriggerSyncInterval SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getUserAttributeCachingDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getSessionInActiveDuration SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDataTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPushNotificationEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setDataTrackingOptOutStatus:(BOOL)optOutStatus;
- (BOOL)isIDFATrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isIDFVTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setNetworkEncryptionStatus:(BOOL)status;
- (BOOL)isNetworkEncryptionEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDefaultEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getAppEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAppGroupID SWIFT_WARN_UNUSED_RESULT;
- (enum MODataCenter)getDataCenter SWIFT_WARN_UNUSED_RESULT;
- (void)setDataCenter:(enum MODataCenter)dataCenter;
- (void)setAppGroupID:(NSString * _Nonnull)appGroupID;
- (enum MOLoggerType)getRemoteMinLogLevel SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getRestrictedUniqueIDRegex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUniqueIDRestricted:(NSString * _Nullable)uniqueID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

SWIFT_CLASS("_TtC12MoEngageCore19MOConfigCoordinator")
@interface MOConfigCoordinator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MOConfigCoordinator * _Nonnull sharedInstance;)
+ (MOConfigCoordinator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(MOConfigCoordinator * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)getConfigControllerForSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionHandler:(void (^ _Nonnull)(MOConfigController * _Nullable))completionHandler;
- (void)applicationEnteredForeground;
- (void)updateRemoteConfig:(NSNotification * _Nonnull)notification;
- (void)userReset:(NSNotification * _Nonnull)notification;
@end


SWIFT_CLASS("_TtC12MoEngageCore6MOCore")
@interface MOCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MOCore * _Nonnull sharedInstance;)
+ (MOCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInstanceWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (void)updateDefaultInstanceSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (MOSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MOSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDK;
- (void)disableSDK;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (void)disableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (BOOL)isSDKEnabledForInstanceForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
- (void)enableLogs:(BOOL)enable;
- (void)enableLogs:(BOOL)enable forAppID:(NSString * _Nullable)appID;
- (void)clearLogs;
- (void)clearLogsForAppID:(NSString * _Nullable)appID;
- (void)enableDefaultConsoleLogger:(BOOL)enable;
@end

@class UIViewController;
@class NSURL;
@class NSUserDefaults;
@class UIApplication;

SWIFT_CLASS("_TtC12MoEngageCore11MOCoreUtils")
@interface MOCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MOSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)removeFileAtPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url;
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getCommonSDKUserDefault SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getSDKUserDefaultInstanceWithConfig:(MOSDKConfig * _Nullable)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushToken:(NSString * _Nonnull)token;
+ (NSString * _Nullable)getPushToken SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserDefaultWithSDKState:(BOOL)isSDKEnabled forSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)enableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)disableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (NSString * _Nullable)MD5Hash:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppIDForNetworkAPICallsWithSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MODataCenter, open) {
  MODataCenterData_center_default = 0,
  MODataCenterData_center_01 = 1,
  MODataCenterData_center_02 = 2,
  MODataCenterData_center_03 = 3,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

SWIFT_CLASS("_TtC12MoEngageCore11MODateUtils")
@interface MODateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MOPluginType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC12MoEngageCore17MOIntegrationInfo")
@interface MOIntegrationInfo : NSObject <NSCoding>
@property (nonatomic) enum MOPluginType integrationType;
@property (nonatomic, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(enum MOPluginType)pluginType andVersion:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore8MOLogger")
@interface MOLogger : NSObject
+ (void)verbose:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)debug:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)info:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)warning:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)error:(NSString * _Nullable)msg stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOLoggerType, open) {
  MOLoggerTypeVerbose = 0,
  MOLoggerTypeDebug = 1,
  MOLoggerTypeInfo = 2,
  MOLoggerTypeWarning = 3,
  MOLoggerTypeError = 4,
};


SWIFT_CLASS("_TtC12MoEngageCore15MONetworkClient")
@interface MONetworkClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
@class NSData;

SWIFT_PROTOCOL("_TtP12MoEngageCore22NetworkRequestProtocol_")
@protocol NetworkRequestProtocol
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


@interface MONetworkClient (SWIFT_EXTENSION(MoEngageCore)) <NetworkRequestProtocol>
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


SWIFT_CLASS("_TtC12MoEngageCore22MONetworkConfiguration")
@interface MONetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum NetworkService : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore16MONetworkRequest")
@interface MONetworkRequest : NSObject
- (nonnull instancetype)init:(MOSDKConfig * _Nonnull)sdkConfig configController:(MOConfigController * _Nonnull)configController serviceType:(enum NetworkService)serviceType params:(NSDictionary<NSString *, id> * _Nullable)params additionalHeaders:(NSDictionary<NSString *, id> * _Nullable)additionalHeaders requestBody:(NSDictionary<NSString *, id> * _Nullable)requestBody additionalPathComponent:(NSString * _Nullable)additionalPathComponent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig OBJC_DESIGNATED_INITIALIZER;
- (void)executeWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSDictionary * _Nullable))completionHandler;
- (void)executeWithCompletionBlockWithResponseCode:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore14MONetworkUtils")
@interface MONetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsDictionaryForService:(enum NetworkService)service withSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOPluginType, open) {
  MOPluginTypeNative = 0,
  MOPluginTypeSegment = 1,
  MOPluginTypeCordova = 2,
  MOPluginTypeReactNative = 3,
  MOPluginTypeFlutter = 4,
  MOPluginTypeUnity = 5,
  MOPluginTypeXamarin = 6,
  MOPluginTypeCapacitor = 7,
};


SWIFT_CLASS("_TtC12MoEngageCore14MORemoteConfig")
@interface MORemoteConfig : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MoEngageCore11MOSDKConfig")
@interface MOSDKConfig : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull moeAppID;
@property (nonatomic) enum MODataCenter moeDataCenter;
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
@property (nonatomic, copy) NSArray<MOIntegrationInfo *> * _Nonnull integrationInfoArray;
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
@property (nonatomic) BOOL encryptNetworkRequests;
@property (nonatomic) BOOL optOutDataTracking;
@property (nonatomic) BOOL optOutIDFATracking;
@property (nonatomic) BOOL optOutIDFVTracking;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL isDefaultInstance;
@property (nonatomic, readonly) BOOL isTestEnvironment;
@property (nonatomic) BOOL enableLogs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID OBJC_DESIGNATED_INITIALIZER;
- (void)updateConfigForTestEnvironment;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)appendIntegrationTypeInfo:(MOIntegrationInfo * _Nonnull)integrationInfo;
@end

@class SFSafariViewController;

SWIFT_CLASS("_TtC12MoEngageCore16MOWebViewHandler")
@interface MOWebViewHandler : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NetworkService is Enumerator which is used for different API calls in the SDK
typedef SWIFT_ENUM(NSInteger, NetworkService, open) {
  NetworkServiceGetConfig = 0,
  NetworkServiceInitialize = 1,
  NetworkServiceSendReports = 2,
  NetworkServiceInAppMetaFetch = 3,
  NetworkServiceInAppGetPayload = 4,
  NetworkServiceInAppGetTestPayload = 5,
  NetworkServiceInAppSendStats = 6,
  NetworkServiceInboxFetch = 7,
  NetworkServiceSendCategories = 8,
  NetworkServiceRealTimeTriggersFetch = 9,
  NetworkServiceCheckUserInSegment = 10,
  NetworkServiceGeofenceHit = 11,
  NetworkServiceGeofencesFetch = 12,
  NetworkServiceCardsFetch = 13,
  NetworkServiceCardsDelete = 14,
  NetworkServiceCardsUserActivity = 15,
  NetworkServiceCrashLake = 16,
};

@class UIImageView;

SWIFT_PROTOCOL("_TtP12MoEngageCore17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SafariServices;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL("_TtP12MoEngageCore28ApplicationLifeCycleProtocol_")
@protocol ApplicationLifeCycleProtocol
- (void)applicationEnteredBackground;
- (void)applicationEnteredforeground;
@end

@class NSString;

SWIFT_CLASS("_TtC12MoEngageCore13MOAccountMeta")
@interface MOAccountMeta : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@end

@class MOSDKConfig;
@class NSNumber;
enum MODataCenter : NSInteger;
enum MOLoggerType : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore18MOConfigController")
@interface MOConfigController : NSObject
@property (nonatomic, strong) MOSDKConfig * _Nonnull sdkConfig;
- (BOOL)isAccountActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppStatsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGeofenceServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInboxServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRealTimeTriggerServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCardsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRemoteLoggingServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPeriodicSyncEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)minimumPeriodicFlushDurationLimit SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)periodicFlushDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getEventBatchCount SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getSourceExtraKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventBlackListed:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedUserAttribute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUserAttributeBlackListed:(NSString * _Nonnull)userAttrName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getInstantFlushEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventInstantFlushEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getWhitelistedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventWhitelistedEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getRealTimeTriggerSyncInterval SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getUserAttributeCachingDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getSessionInActiveDuration SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDataTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPushNotificationEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setDataTrackingOptOutStatus:(BOOL)optOutStatus;
- (BOOL)isIDFATrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isIDFVTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setNetworkEncryptionStatus:(BOOL)status;
- (BOOL)isNetworkEncryptionEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDefaultEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getAppEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAppGroupID SWIFT_WARN_UNUSED_RESULT;
- (enum MODataCenter)getDataCenter SWIFT_WARN_UNUSED_RESULT;
- (void)setDataCenter:(enum MODataCenter)dataCenter;
- (void)setAppGroupID:(NSString * _Nonnull)appGroupID;
- (enum MOLoggerType)getRemoteMinLogLevel SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getRestrictedUniqueIDRegex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUniqueIDRestricted:(NSString * _Nullable)uniqueID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

SWIFT_CLASS("_TtC12MoEngageCore19MOConfigCoordinator")
@interface MOConfigCoordinator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MOConfigCoordinator * _Nonnull sharedInstance;)
+ (MOConfigCoordinator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(MOConfigCoordinator * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)getConfigControllerForSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionHandler:(void (^ _Nonnull)(MOConfigController * _Nullable))completionHandler;
- (void)applicationEnteredForeground;
- (void)updateRemoteConfig:(NSNotification * _Nonnull)notification;
- (void)userReset:(NSNotification * _Nonnull)notification;
@end


SWIFT_CLASS("_TtC12MoEngageCore6MOCore")
@interface MOCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MOCore * _Nonnull sharedInstance;)
+ (MOCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInstanceWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (void)updateDefaultInstanceSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (MOSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MOSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDK;
- (void)disableSDK;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (void)disableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (BOOL)isSDKEnabledForInstanceForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
- (void)enableLogs:(BOOL)enable;
- (void)enableLogs:(BOOL)enable forAppID:(NSString * _Nullable)appID;
- (void)clearLogs;
- (void)clearLogsForAppID:(NSString * _Nullable)appID;
- (void)enableDefaultConsoleLogger:(BOOL)enable;
@end

@class UIViewController;
@class NSURL;
@class NSUserDefaults;
@class UIApplication;

SWIFT_CLASS("_TtC12MoEngageCore11MOCoreUtils")
@interface MOCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MOSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)removeFileAtPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url;
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getCommonSDKUserDefault SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getSDKUserDefaultInstanceWithConfig:(MOSDKConfig * _Nullable)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushToken:(NSString * _Nonnull)token;
+ (NSString * _Nullable)getPushToken SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserDefaultWithSDKState:(BOOL)isSDKEnabled forSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)enableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)disableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (NSString * _Nullable)MD5Hash:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppIDForNetworkAPICallsWithSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MODataCenter, open) {
  MODataCenterData_center_default = 0,
  MODataCenterData_center_01 = 1,
  MODataCenterData_center_02 = 2,
  MODataCenterData_center_03 = 3,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

SWIFT_CLASS("_TtC12MoEngageCore11MODateUtils")
@interface MODateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MOPluginType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC12MoEngageCore17MOIntegrationInfo")
@interface MOIntegrationInfo : NSObject <NSCoding>
@property (nonatomic) enum MOPluginType integrationType;
@property (nonatomic, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(enum MOPluginType)pluginType andVersion:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore8MOLogger")
@interface MOLogger : NSObject
+ (void)verbose:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)debug:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)info:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)warning:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)error:(NSString * _Nullable)msg stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOLoggerType, open) {
  MOLoggerTypeVerbose = 0,
  MOLoggerTypeDebug = 1,
  MOLoggerTypeInfo = 2,
  MOLoggerTypeWarning = 3,
  MOLoggerTypeError = 4,
};


SWIFT_CLASS("_TtC12MoEngageCore15MONetworkClient")
@interface MONetworkClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
@class NSData;

SWIFT_PROTOCOL("_TtP12MoEngageCore22NetworkRequestProtocol_")
@protocol NetworkRequestProtocol
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


@interface MONetworkClient (SWIFT_EXTENSION(MoEngageCore)) <NetworkRequestProtocol>
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


SWIFT_CLASS("_TtC12MoEngageCore22MONetworkConfiguration")
@interface MONetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum NetworkService : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore16MONetworkRequest")
@interface MONetworkRequest : NSObject
- (nonnull instancetype)init:(MOSDKConfig * _Nonnull)sdkConfig configController:(MOConfigController * _Nonnull)configController serviceType:(enum NetworkService)serviceType params:(NSDictionary<NSString *, id> * _Nullable)params additionalHeaders:(NSDictionary<NSString *, id> * _Nullable)additionalHeaders requestBody:(NSDictionary<NSString *, id> * _Nullable)requestBody additionalPathComponent:(NSString * _Nullable)additionalPathComponent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig OBJC_DESIGNATED_INITIALIZER;
- (void)executeWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSDictionary * _Nullable))completionHandler;
- (void)executeWithCompletionBlockWithResponseCode:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore14MONetworkUtils")
@interface MONetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsDictionaryForService:(enum NetworkService)service withSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOPluginType, open) {
  MOPluginTypeNative = 0,
  MOPluginTypeSegment = 1,
  MOPluginTypeCordova = 2,
  MOPluginTypeReactNative = 3,
  MOPluginTypeFlutter = 4,
  MOPluginTypeUnity = 5,
  MOPluginTypeXamarin = 6,
  MOPluginTypeCapacitor = 7,
};


SWIFT_CLASS("_TtC12MoEngageCore14MORemoteConfig")
@interface MORemoteConfig : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MoEngageCore11MOSDKConfig")
@interface MOSDKConfig : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull moeAppID;
@property (nonatomic) enum MODataCenter moeDataCenter;
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
@property (nonatomic, copy) NSArray<MOIntegrationInfo *> * _Nonnull integrationInfoArray;
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
@property (nonatomic) BOOL encryptNetworkRequests;
@property (nonatomic) BOOL optOutDataTracking;
@property (nonatomic) BOOL optOutIDFATracking;
@property (nonatomic) BOOL optOutIDFVTracking;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL isDefaultInstance;
@property (nonatomic, readonly) BOOL isTestEnvironment;
@property (nonatomic) BOOL enableLogs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID OBJC_DESIGNATED_INITIALIZER;
- (void)updateConfigForTestEnvironment;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)appendIntegrationTypeInfo:(MOIntegrationInfo * _Nonnull)integrationInfo;
@end

@class SFSafariViewController;

SWIFT_CLASS("_TtC12MoEngageCore16MOWebViewHandler")
@interface MOWebViewHandler : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NetworkService is Enumerator which is used for different API calls in the SDK
typedef SWIFT_ENUM(NSInteger, NetworkService, open) {
  NetworkServiceGetConfig = 0,
  NetworkServiceInitialize = 1,
  NetworkServiceSendReports = 2,
  NetworkServiceInAppMetaFetch = 3,
  NetworkServiceInAppGetPayload = 4,
  NetworkServiceInAppGetTestPayload = 5,
  NetworkServiceInAppSendStats = 6,
  NetworkServiceInboxFetch = 7,
  NetworkServiceSendCategories = 8,
  NetworkServiceRealTimeTriggersFetch = 9,
  NetworkServiceCheckUserInSegment = 10,
  NetworkServiceGeofenceHit = 11,
  NetworkServiceGeofencesFetch = 12,
  NetworkServiceCardsFetch = 13,
  NetworkServiceCardsDelete = 14,
  NetworkServiceCardsUserActivity = 15,
  NetworkServiceCrashLake = 16,
};

@class UIImageView;

SWIFT_PROTOCOL("_TtP12MoEngageCore17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SafariServices;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL("_TtP12MoEngageCore28ApplicationLifeCycleProtocol_")
@protocol ApplicationLifeCycleProtocol
- (void)applicationEnteredBackground;
- (void)applicationEnteredforeground;
@end

@class NSString;

SWIFT_CLASS("_TtC12MoEngageCore13MOAccountMeta")
@interface MOAccountMeta : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@end

@class MOSDKConfig;
@class NSNumber;
enum MODataCenter : NSInteger;
enum MOLoggerType : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore18MOConfigController")
@interface MOConfigController : NSObject
@property (nonatomic, strong) MOSDKConfig * _Nonnull sdkConfig;
- (BOOL)isAccountActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppStatsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGeofenceServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInboxServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRealTimeTriggerServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCardsServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRemoteLoggingServiceActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPeriodicSyncEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)minimumPeriodicFlushDurationLimit SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)periodicFlushDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getEventBatchCount SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getSourceExtraKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventBlackListed:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getBlackListedUserAttribute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUserAttributeBlackListed:(NSString * _Nonnull)userAttrName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getInstantFlushEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventInstantFlushEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getWhitelistedEvents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEventWhitelistedEvent:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getRealTimeTriggerSyncInterval SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getUserAttributeCachingDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getSessionInActiveDuration SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDataTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPushNotificationEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInAppEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setDataTrackingOptOutStatus:(BOOL)optOutStatus;
- (BOOL)isIDFATrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isIDFVTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)setNetworkEncryptionStatus:(BOOL)status;
- (BOOL)isNetworkEncryptionEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDefaultEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getAppEncryptionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAppGroupID SWIFT_WARN_UNUSED_RESULT;
- (enum MODataCenter)getDataCenter SWIFT_WARN_UNUSED_RESULT;
- (void)setDataCenter:(enum MODataCenter)dataCenter;
- (void)setAppGroupID:(NSString * _Nonnull)appGroupID;
- (enum MOLoggerType)getRemoteMinLogLevel SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getRestrictedUniqueIDRegex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUniqueIDRestricted:(NSString * _Nullable)uniqueID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

SWIFT_CLASS("_TtC12MoEngageCore19MOConfigCoordinator")
@interface MOConfigCoordinator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MOConfigCoordinator * _Nonnull sharedInstance;)
+ (MOConfigCoordinator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(MOConfigCoordinator * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)getConfigControllerForSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionHandler:(void (^ _Nonnull)(MOConfigController * _Nullable))completionHandler;
- (void)applicationEnteredForeground;
- (void)updateRemoteConfig:(NSNotification * _Nonnull)notification;
- (void)userReset:(NSNotification * _Nonnull)notification;
@end


SWIFT_CLASS("_TtC12MoEngageCore6MOCore")
@interface MOCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MOCore * _Nonnull sharedInstance;)
+ (MOCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInstanceWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (void)updateDefaultInstanceSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withCompletionBlock:(void (^ _Nonnull)(void))completion;
- (MOSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MOSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDK;
- (void)disableSDK;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (void)disableSDKForInstanceForAppID:(NSString * _Nonnull)appID;
- (BOOL)isSDKEnabledForInstanceForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
- (void)enableLogs:(BOOL)enable;
- (void)enableLogs:(BOOL)enable forAppID:(NSString * _Nullable)appID;
- (void)clearLogs;
- (void)clearLogsForAppID:(NSString * _Nullable)appID;
- (void)enableDefaultConsoleLogger:(BOOL)enable;
@end

@class UIViewController;
@class NSURL;
@class NSUserDefaults;
@class UIApplication;

SWIFT_CLASS("_TtC12MoEngageCore11MOCoreUtils")
@interface MOCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MOSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)removeFileAtPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url;
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getCommonSDKUserDefault SWIFT_WARN_UNUSED_RESULT;
+ (NSUserDefaults * _Nullable)getSDKUserDefaultInstanceWithConfig:(MOSDKConfig * _Nullable)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushToken:(NSString * _Nonnull)token;
+ (NSString * _Nullable)getPushToken SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserDefaultWithSDKState:(BOOL)isSDKEnabled forSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)enableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (void)disableSDKForInstanceWithConfig:(MOSDKConfig * _Nonnull)sdkConfig;
+ (NSString * _Nullable)MD5Hash:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppIDForNetworkAPICallsWithSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MODataCenter, open) {
  MODataCenterData_center_default = 0,
  MODataCenterData_center_01 = 1,
  MODataCenterData_center_02 = 2,
  MODataCenterData_center_03 = 3,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

SWIFT_CLASS("_TtC12MoEngageCore11MODateUtils")
@interface MODateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MOPluginType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC12MoEngageCore17MOIntegrationInfo")
@interface MOIntegrationInfo : NSObject <NSCoding>
@property (nonatomic) enum MOPluginType integrationType;
@property (nonatomic, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(enum MOPluginType)pluginType andVersion:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore8MOLogger")
@interface MOLogger : NSObject
+ (void)verbose:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)debug:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig;
+ (void)info:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)warning:(NSString * _Nullable)msg label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
+ (void)error:(NSString * _Nullable)msg stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label sdkConfig:(MOSDKConfig * _Nullable)sdkConfig fileName:(NSString * _Nonnull)fileName functionName:(NSString * _Nonnull)functionName lineNumber:(NSInteger)lineNumber columnNumber:(NSInteger)columnNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOLoggerType, open) {
  MOLoggerTypeVerbose = 0,
  MOLoggerTypeDebug = 1,
  MOLoggerTypeInfo = 2,
  MOLoggerTypeWarning = 3,
  MOLoggerTypeError = 4,
};


SWIFT_CLASS("_TtC12MoEngageCore15MONetworkClient")
@interface MONetworkClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
@class NSData;

SWIFT_PROTOCOL("_TtP12MoEngageCore22NetworkRequestProtocol_")
@protocol NetworkRequestProtocol
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


@interface MONetworkClient (SWIFT_EXTENSION(MoEngageCore)) <NetworkRequestProtocol>
- (void)executeRequest:(NSURLRequest * _Nonnull)request forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController completionHandler:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionHandler;
- (void)downloadImageURL:(NSURL * _Nonnull)imageURL forSdkConfig:(MOSDKConfig * _Nonnull)sdkConfig dataCompletionHandler:(void (^ _Nonnull)(BOOL, NSData * _Nullable))dataCompletionHandler;
@end


SWIFT_CLASS("_TtC12MoEngageCore22MONetworkConfiguration")
@interface MONetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum NetworkService : NSInteger;

SWIFT_CLASS("_TtC12MoEngageCore16MONetworkRequest")
@interface MONetworkRequest : NSObject
- (nonnull instancetype)init:(MOSDKConfig * _Nonnull)sdkConfig configController:(MOConfigController * _Nonnull)configController serviceType:(enum NetworkService)serviceType params:(NSDictionary<NSString *, id> * _Nullable)params additionalHeaders:(NSDictionary<NSString *, id> * _Nullable)additionalHeaders requestBody:(NSDictionary<NSString *, id> * _Nullable)requestBody additionalPathComponent:(NSString * _Nullable)additionalPathComponent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig OBJC_DESIGNATED_INITIALIZER;
- (void)executeWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSDictionary * _Nullable))completionHandler;
- (void)executeWithCompletionBlockWithResponseCode:(void (^ _Nonnull)(BOOL, NSInteger, NSDictionary * _Nullable))completionBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore14MONetworkUtils")
@interface MONetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsDictionaryForService:(enum NetworkService)service withSDKConfig:(MOSDKConfig * _Nonnull)sdkConfig withConfigController:(MOConfigController * _Nonnull)configController SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MOPluginType, open) {
  MOPluginTypeNative = 0,
  MOPluginTypeSegment = 1,
  MOPluginTypeCordova = 2,
  MOPluginTypeReactNative = 3,
  MOPluginTypeFlutter = 4,
  MOPluginTypeUnity = 5,
  MOPluginTypeXamarin = 6,
  MOPluginTypeCapacitor = 7,
};


SWIFT_CLASS("_TtC12MoEngageCore14MORemoteConfig")
@interface MORemoteConfig : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MoEngageCore11MOSDKConfig")
@interface MOSDKConfig : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull moeAppID;
@property (nonatomic) enum MODataCenter moeDataCenter;
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
@property (nonatomic, copy) NSArray<MOIntegrationInfo *> * _Nonnull integrationInfoArray;
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
@property (nonatomic) BOOL encryptNetworkRequests;
@property (nonatomic) BOOL optOutDataTracking;
@property (nonatomic) BOOL optOutIDFATracking;
@property (nonatomic) BOOL optOutIDFVTracking;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL isDefaultInstance;
@property (nonatomic, readonly) BOOL isTestEnvironment;
@property (nonatomic) BOOL enableLogs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID OBJC_DESIGNATED_INITIALIZER;
- (void)updateConfigForTestEnvironment;
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)appendIntegrationTypeInfo:(MOIntegrationInfo * _Nonnull)integrationInfo;
@end

@class SFSafariViewController;

SWIFT_CLASS("_TtC12MoEngageCore16MOWebViewHandler")
@interface MOWebViewHandler : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NetworkService is Enumerator which is used for different API calls in the SDK
typedef SWIFT_ENUM(NSInteger, NetworkService, open) {
  NetworkServiceGetConfig = 0,
  NetworkServiceInitialize = 1,
  NetworkServiceSendReports = 2,
  NetworkServiceInAppMetaFetch = 3,
  NetworkServiceInAppGetPayload = 4,
  NetworkServiceInAppGetTestPayload = 5,
  NetworkServiceInAppSendStats = 6,
  NetworkServiceInboxFetch = 7,
  NetworkServiceSendCategories = 8,
  NetworkServiceRealTimeTriggersFetch = 9,
  NetworkServiceCheckUserInSegment = 10,
  NetworkServiceGeofenceHit = 11,
  NetworkServiceGeofencesFetch = 12,
  NetworkServiceCardsFetch = 13,
  NetworkServiceCardsDelete = 14,
  NetworkServiceCardsUserActivity = 15,
  NetworkServiceCrashLake = 16,
};

@class UIImageView;

SWIFT_PROTOCOL("_TtP12MoEngageCore17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
