// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-tvos10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoEngageAnalytics
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import Foundation
import MoEngageCore
import MoEngageObjCUtils
import Swift
import UIKit
import _Concurrency
@objc public enum UserGender : Swift.Int {
  case male = 0
  case female
  case others
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AppStatus : Swift.Int {
  case install = 0
  case update
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MOAnalyticsUtils {
  public class func getIDFA() -> Swift.String?
  @objc deinit
}
@objc public class MOEventCondition : ObjectiveC.NSObject {
  @objc public init(withEventName name: Swift.String, andConditionDict conditionDict: Swift.Dictionary<Swift.String, Any>)
  @objc public func checkConditionSatisfied(forEvent event: Swift.String, andAttributesPayload attributesPayload: Swift.Dictionary<Swift.String, Any>) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MOAnalytics : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageAnalytics.MOAnalytics
  @objc public func initializeAnalytics(forInstanceID instanceID: Swift.String)
  @objc public func updateTimerForSegment(forSDKConfig sdkConfig: MoEngageCore.MOSDKConfig)
  @objc public func trackSDKVersion()
  @objc public func updateSessionSource(withPushPayload payload: [Swift.AnyHashable : Any], fromMoEngage isMoEngagePush: Swift.Bool)
  @objc public func updateSessionSource(withURL url: Foundation.URL)
  @objc public func processURL(_ url: Foundation.URL?)
  @objc public func pushTokenUpdated()
  @objc public func appStatus(_ appStatus: MoEngageAnalytics.AppStatus, forAppID appID: Swift.String? = nil)
  @objc public func trackEvent(_ name: Swift.String, withProperties properties: MoEngageAnalytics.MOProperties? = nil, forAppID appID: Swift.String? = nil)
  @objc public func flush(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func flushRichNotificationEvents(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func setUserAttribute(_ value: Any?, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeEpochTime(_ dateEpoch: Swift.Double, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeDate(_ date: Foundation.Date, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeISODate(_ dateStr: Swift.String, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageAnalytics.MOGeoLocation, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setAlias(_ alias: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUniqueID(_ uniqueID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setEmailID(_ emailID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setName(_ userName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setFirstName(_ firstName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLastName(_ lastName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setMobileNumber(_ mobileNum: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setGender(_ gender: MoEngageAnalytics.UserGender, forAppID appID: Swift.String? = nil)
  @objc public func setDateOfBirth(_ dob: Foundation.Date, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageAnalytics.MOGeoLocation, forAppID appID: Swift.String? = nil)
  @objc public func trackUserPushPreference(_ isPushEnabled: Swift.Bool, forAppID appID: Swift.String? = nil)
  @objc public func trackLocale(forAppID appID: Swift.String? = nil)
  @objc public func resetUser(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func enableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func disableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func optOutOfIDFATracking(_ isOptedOut: Swift.Bool, forAppID appID: Swift.String? = nil)
  @objc public func optOutOfIDFVTracking(_ isOptedOut: Swift.Bool, forAppID appID: Swift.String? = nil)
  @objc public func updateSDKWhitelistedEvents(_ eventsArray: Swift.Array<Swift.String>)
  @objc public func moengageSDKStateUpdated(forInstanceID instanceID: Swift.String)
  public func setRTTEventDelegate(_ delegate: MoEngageAnalytics.MOEventTrackDelegate, forInstanceID instanceID: Swift.String)
  @objc public func setInAppEventDelegate(_ delegate: MoEngageAnalytics.MOEventTrackDelegate, forInstanceID instanceID: Swift.String)
  @objc deinit
}
extension MoEngageAnalytics.MOAnalytics : MoEngageObjCUtils.MOAppDelegateAnalyticsProxyProtocol {
  @objc dynamic public func handleOpen(_ url: Foundation.URL)
}
@objc public class MOSource : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  public init(withSourceInfoDict infoDict: [Swift.AnyHashable : Any], andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MOConfigController)
  public init(withURL urlStr: Swift.String, andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MOConfigController)
  public func isValidSource() -> Swift.Bool
  @objc deinit
}
@objc public protocol MOEventTrackDelegate {
  @objc func eventTracked(withEventName event: Swift.String, andAttributes attrDict: [Swift.String : Any])
}
@objc public class MOProperties : ObjectiveC.NSObject {
  @objc public init(withAttributes attributesDict: Swift.Dictionary<Swift.String, Any>? = nil)
  @objc public func updateAttributes(withPluginPayload payloadDict: Swift.Dictionary<Swift.String, Any>?)
  @objc public func addAttribute(_ attrVal: Any?, withName attrName: Swift.String)
  @objc public func addLocationAttribute(_ attrVal: MoEngageAnalytics.MOGeoLocation, withName attrName: Swift.String)
  @objc public func addDateAttribute(_ attrVal: Foundation.Date, withName attrName: Swift.String)
  @objc public func addDateISOStringAttribute(_ dateStr: Swift.String, withName attrName: Swift.String)
  @objc public func addDateEpochAttribute(_ epoch: Swift.Double, withName attrName: Swift.String)
  @objc public func setNonInteractive()
  @objc deinit
}
@objc public class MOGeoLocation : ObjectiveC.NSObject {
  @objc public var latitude: Swift.Double
  @objc public var longitude: Swift.Double
  @objc public init(withLatitude lat: Swift.Double, andLongitude lng: Swift.Double)
  @objc deinit
}
extension MoEngageAnalytics.UserGender : Swift.Equatable {}
extension MoEngageAnalytics.UserGender : Swift.Hashable {}
extension MoEngageAnalytics.UserGender : Swift.RawRepresentable {}
extension MoEngageAnalytics.AppStatus : Swift.Equatable {}
extension MoEngageAnalytics.AppStatus : Swift.Hashable {}
extension MoEngageAnalytics.AppStatus : Swift.RawRepresentable {}
